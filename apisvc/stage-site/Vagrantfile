# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "bento/centos-7.2"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "bootstrap", type: "shell", inline: <<-SHELL
  #   yum -y update # (optional)
  
      # install pip
      yum -y install epel-release-7-9.noarch
      yum -y install python2-pip-8.1.2-5.el7.noarch

      # install gcc and python-devel
      yum -y group install "Development Tools"
      yum -y install python-devel

      # install apisvc dependency   
      pip install -r /vagrant/data/requirements.txt
      yum -y install jq-1.5-1.el7.x86_64 # skip `openssl` and `base64` due to pre-installed
      curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/bin

      # install apisvc  
      pip install /vagrant/data/apisvc-1.0.0.tar.gz

      # install apisvc cache dir
      cp -r /usr/lib/python2.7/site-packages/apisvc/cache /var/cache/apisvc

      # install apisvc log dir
      mkdir -p /var/log/apisvc

      # install apisvc tmp dir
      mkdir -p /tmp/apisvc

      # install apisvc lock dir
      mkdir -p /var/lock/apisvc
  
      # install apisvc systemd service unit (http server option 1)
      cp /vagrant/data/apisvc.service /usr/lib/systemd/system/
      chmod 664 /usr/lib/systemd/system/apisvc.service
      systemctl daemon-reload
      systemctl enable apisvc
      systemctl start apisvc
  
  #   # install apache and its systemd service unit (http server option 2)
  #   yum -y install httpd-2.4.6-67.el7.centos.6.x86_64
  #   systemctl enable httpd
  #   systemctl start httpd
  
      # install docker for local etcd and os-keystone (optional)
      yum -y install yum-utils device-mapper-persistent-data lvm2
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      yum -y install docker-ce
      systemctl enable docker
      systemctl start docker
      docker pull quay.io/coreos/etcd:v3.0.17
      docker pull stephenhsu/keystone:9.1.0

      # install etcdctl (optional)
      # TODO
  SHELL

  config.vm.provision "poweron", type: "shell", inline: <<-SHELL
      # bring up enp0s8 (workaround)
      ifconfig enp0s8 192.168.33.10

      # re-install apisvc lock dir (workaround)
      mkdir -p /var/lock/apisvc

      # bring up local etcd and os-keystone (optional)
      bash /vagrant/data/bring-up-local-etcd.sh
      bash /vagrant/data/bring-up-local-os-keystone.sh
      echo 'waiting etcd ready'; sleep 3
      APISVC_SAMPLES_DIR=/vagrant/data/samples bash /vagrant/data/init-etcd-db-for-dev.sh
  SHELL
end
